title: HelloThere

! External Pipe Demos

Note that the browser polls the server every {{$:/config/SyncPollingInterval}}ms. You can trigger an instaneous poll:  <$button message="tm-server-refresh">Refresh</$button>

Status: {{JobStatus}} {{JobStatus!!message}}

!! Reverser

This demo requires the example task `reverser.js 8081` to be running in a separate command window. You can edit the [[Sample Text]].

<$button>
<$action-sendmessage $message="tm-execute-job" 1="--pipe" 2="reverser" 3="[[Sample Text]]" 4="PipeOutput" statusTitle="JobStatus"/>
Reverser
</$button>

!! Recaser

This demo requires the example task `./recaser.js 8081` or `./recase_erl.sh` to be running in a separate command window. You can edit the [[Sample Text]].

<$button>
<$action-sendmessage $message="tm-execute-job" 1="--pipe" 2="recaser" 3="[[Sample Text]]" 4="PipeOutput" statusTitle="JobStatus"/>
Recaser
</$button>

!! Tagger

This demo requires the example task `./badtagger.js 8081` to be running in a separate command window. You can edit the [[Sample Text]].

<$button>
<$action-sendmessage $message="tm-execute-job" 1="--pipe" 2="badtagger" 3="[[Sample Text]]" 4="PipeOutput" statusTitle="JobStatus"/>
Tagger
</$button>

!! Mimic

<$button>
<$action-sendmessage $message="tm-execute-job" 1="--pipe" 2="mimic" 3="[[Alice in Wonderland]]" 4="PipeOutput" 5="5" 6="5000" statusTitle="JobStatus"/>
Mimic
</$button>

!! Stats

<$button>
<$action-sendmessage $message="tm-execute-job" 1="--pipe" 2="stats" 3="[[Alice in Wonderland]]" 4="PipeOutput" statusTitle="JobStatus"/>
Stats
</$button>

!! Demo Output

The output generated by the demos appears here:

{{PipeOutput}}
